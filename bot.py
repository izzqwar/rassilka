import os
import asyncio
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from telethon import TelegramClient
from telethon.sessions import StringSession

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
SESSION_FILE = "session.session"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PHONE, CODE, TFA = range(3)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient(SESSION_FILE, API_ID, API_HASH)

async def start_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567):"
    )
    return PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    context.user_data["phone"] = update.message.text
    await client.connect()
    try:
        await client.send_code_request(context.user_data["phone"])
        await update.message.reply_text("üì≤ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
        return CODE
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END

async def handle_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    code = update.message.text.strip()
    try:
        await client.sign_in(
            phone=context.user_data["phone"],
            code=code
        )
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        await client.disconnect()
    except Exception as e:
        if "two-step verification" in str(e):
            await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            return TFA
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END
    return ConversationHandler.END

async def handle_tfa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    password = update.message.text
    try:
        await client.sign_in(password=password)
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        await client.disconnect()
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
    )

async def mailing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    if not await client.is_user_authorized():
        await update.message.reply_text("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth")
        return

    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    context.user_data["state"] = "awaiting_mailing_text"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if context.user_data.get("state") != "awaiting_mailing_text":
        return

    try:
        chat_ids = load_chats()
        if not chat_ids:
            await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª groups.txt –ø—É—Å—Ç")
            return

        async with client:
            success = 0
            for chat_id in chat_ids:
                try:
                    await client.send_message(int(chat_id), update.message.text)
                    success += 1
                    await asyncio.sleep(5)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")

            await update.message.reply_text(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}/{len(chat_ids)}"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    context.user_data.pop("state", None)

def load_chats():
    """–ó–∞–≥—Ä—É–∑–∫–∞ ID —á–∞—Ç–æ–≤"""
    try:
        with open("groups.txt", "r") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        return []

async def init_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    if os.path.exists(SESSION_FILE):
        await client.start()
        return True
    return False

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    app = Application.builder().token(BOT_TOKEN).build()

    # ConversationHandler –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("auth", start_auth)],
        states={
            PHONE: [MessageHandler(filters.TEXT, handle_phone)],
            CODE: [MessageHandler(filters.TEXT, handle_code)],
            TFA: [MessageHandler(filters.TEXT, handle_tfa)],
        },
        fallbacks=[]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mailing", mailing))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫
    app.run_polling()
